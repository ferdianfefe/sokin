// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?   @map("hashed_password")
  image         String?
  accounts      Account[]
  sessions      Session[]
  balance       Float     @default(0)
  coordinates   String?
  points        Int       @default(0)
  creditScore   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Order         Order[]

  @@map("users")
}

model Account {
  id                String  @id @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.String
  accessToken       String? @map("access_token") @db.String
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.String
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @map("_id") @db.ObjectId
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@map("verificationtokens")
}

model Owner {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  idCardNumber     String     @unique
  city             String
  address          String
  phoneNumber      String
  email            String     @unique
  password         String     @map("hashed_password")
  bankName         String
  accountNumber    String
  accountBookPhoto String
  balance          Int?       @default(0)
  menus            Menu[]
  Merchant         Merchant[]

  @@map("owners")
}

model Merchant {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  ownerId      String? @map("owner_id") @db.ObjectId
  name         String?
  address      String?
  postalCode   String?
  coordinates  String?
  benchmark    String?
  merchantLogo String?
  owner        Owner?  @relation(fields: [ownerId], references: [id])
  Order        Order[]

  @@map("merchants")
}

model Driver {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  idCardNumber    String  @unique
  city            String
  address         String
  phoneNumber     String
  email           String  @unique
  licenseNumber   String
  vehicle         String
  balance         Float?
  isActive        Boolean @default(false)
  coordinates     String?
  dailyIncome     Float?  @default(0)
  distanceCovered Float?  @default(0)
  dailyTarget     Int     @default(20)
  password        String  @map("hashed_password")
  orders          Order[]

  @@map("drivers")
}

model Menu {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String     @map("owner_id") @db.ObjectId
  name        String
  price       Float
  category    String?
  description String?
  stock       Int?       @default(0)
  image       String?
  owner       Owner      @relation(fields: [ownerId], references: [id])
  MenuItem    MenuItem[]

  @@map("menus")
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  driverId    String?       @map("driver_id") @db.ObjectId
  userId      String       @map("user_id") @db.ObjectId
  merchantId  String       @map("merchant_id") @db.ObjectId
  cartId      String       @map("cart_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  source      String
  destination String
  distance    Float
  status      OrderStatus? @default(DELIVERY)
  eta         Int
  isAccepted  Boolean      @default(false)
  isCompleted Boolean      @default(false)
  foodFee     Float?
  costFee     Float?
  driver      Driver?      @relation(fields: [driverId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])
  cart        Cart?        @relation(fields: [cartId], references: [id])
  merchant    Merchant?    @relation(fields: [merchantId], references: [id])
}

model Promo {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  promoType      String
  title          String
  discPercentage Int?
  discValue      Int?
  minOrder       Int
  maxDisc        Int

  @@map("promo")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @map("user_id") @db.ObjectId
  menuItems MenuItem[]
  Order     Order[]
}

model MenuItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  cart     Cart   @relation(fields: [cartId], references: [id])
  cartId   String @map("cart_id") @db.ObjectId
  menu     Menu   @relation(fields: [menuId], references: [id])
  menuId   String @map("menu_id") @db.ObjectId
  quantity Int
}

enum OrderStatus {
  DELIVERY
  PROCESS
  DONE
}
